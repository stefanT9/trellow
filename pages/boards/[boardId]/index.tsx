import Head from "next/head";
import { useContext, useEffect, useState } from "react";
import { TasksContext } from "../../../store/TasksContext";
import { Col, Row, Button, Typography, Input } from "antd";
import { TaskCard } from "../../../components/TaskCard";
import CreateTaskDialog from "../../../components/CreateTaskDialog";
import { BoardsContext } from "../../../store/BoardsContext";
import { DeleteOutlined } from "@ant-design/icons";
import EditTaskDialog from "../../../components/EditTaskDialog";

export async function getServerSideProps(ctx: any) {
  const { boardId } = ctx.params;
  return {
    props: {
      boardId,
    },
  };
}

export default function TasksPage({ boardId }: any) {
  const [open, setOpen] = useState(false);
  const { state, functions } = useContext(TasksContext);
  const selectTask = functions.selectTask;
  const { boards, selectedBoard } = useContext(BoardsContext).state;
  const { updateBoard, getBoardById } = useContext(BoardsContext).functions;
  const [categoryName, setCategoryName] = useState("");

  useEffect(() => {
    functions.getTasks(boardId);
    getBoardById(boardId);
  }, [boardId, boards]);

  const handleCreateCategory = () => {
    if (!selectedBoard) {
      return;
    }
    updateBoard({
      ...selectedBoard,
      categories: [...selectedBoard?.categories, categoryName],
    });
    setCategoryName("");
  };

  const handeEditCategory = (newCategory: string, oldCategory: string) => {
    state.tasks
      .filter(({ status }) => oldCategory === status)
      .map((task) => ({ ...task, status: newCategory }))
      .forEach((task) => {
        functions.updateTask(task);
      });

    updateBoard({
      ...selectedBoard,
      categories: selectedBoard?.categories.map((category) =>
        category === oldCategory ? newCategory : category
      ),
    });
  };
  const handleDeleteCategory = (category: string) => {
    updateBoard({
      ...selectedBoard,
      categories: selectedBoard?.categories.filter(
        (_category) => _category !== category
      ),
    });
  };

  return (
    <div>
      <Head>
        <title>Trellow</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Row justify="center" align="top">
        <>
          {console.log("board=>", selectedBoard?.categories)}
          {selectedBoard?.categories.map((category) => (
            <Col span={4}>
              <Typography.Title style={{ textAlign: "center" }}>
                <Input
                  defaultValue={category}
                  onBlur={(event) => {
                    handeEditCategory(event.target.value, category);
                  }}
                />
              </Typography.Title>
              <div style={{ display: "flex", justifyContent: "space-around" }}>
                <Button
                  onClick={() => {
                    setOpen(true);
                    functions.setCurrentCategory(category);
                  }}
                >
                  +
                </Button>
                <Button onClick={() => handleDeleteCategory(category)}>
                  <DeleteOutlined />
                </Button>
              </div>
              {state.tasks
                .filter(({ status }) => category === status)
                .map((task) => (
                  <TaskCard task={task} />
                ))}
            </Col>
          ))}
          {selectedBoard?.categories && selectedBoard.categories.length < 4 && (
            <Col span={4}>
              <Typography.Title style={{ textAlign: "center" }}>
                <Input
                  required={true}
                  value={categoryName}
                  onChange={(evt) => {
                    setCategoryName(evt.target.value);
                  }}
                />
              </Typography.Title>

              <Button
                disabled={
                  categoryName === "" ||
                  selectedBoard.categories.find(
                    (_category) => _category === categoryName
                  ) !== undefined
                }
                onClick={handleCreateCategory}
              >
                new Category
              </Button>
            </Col>
          )}
        </>
      </Row>
      {open && (
        <CreateTaskDialog
          open={open}
          onOk={() => setOpen(false)}
          onCancel={() => setOpen(false)}
        />
      )}
      {state.selectedTask && (
        <EditTaskDialog
          open={true}
          onOk={() => selectTask(undefined)}
          onCancel={() => selectTask(undefined)}
        />
      )}
    </div>
  );
}
